/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Batch
 */
export interface Batch {
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'feedstock_weight'?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'feedstock_moisture_content'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Batch
     */
    'testing'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    'updated_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'biochar_produced'?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'moisture_content'?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'a1_diesel_consumed'?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'a2_diesel_consumed'?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'a3_diesel_consumed'?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'a3_electricity_consumed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'a3_feedstock_preparation'?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'a3_propane_consumption'?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'a3_stack_emissions_n20'?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'a3_stack_emissions_ch4'?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'a3_stack_emissions_c02'?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'a4_diesel_consumed'?: number;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    'end_date': string;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    'feedstock': number;
}
/**
 * 
 * @export
 * @interface BatchCSV
 */
export interface BatchCSV {
    /**
     * 
     * @type {number}
     * @memberof BatchCSV
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BatchCSV
     */
    'file_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BatchCSV
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof BatchCSV
     */
    'updated_at'?: string;
    /**
     * 
     * @type {File}
     * @memberof BatchCSV
     */
    'csv_file': File;
}
/**
 * 
 * @export
 * @interface Feedstock
 */
export interface Feedstock {
    /**
     * 
     * @type {number}
     * @memberof Feedstock
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Feedstock
     */
    'feedstock_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof Feedstock
     */
    'lab_results'?: number | null;
}
/**
 * 
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * 
     * @type {number}
     * @memberof Report
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'file_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'created_at'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Report
     */
    'template'?: boolean;
    /**
     * 
     * @type {File}
     * @memberof Report
     */
    'file': File;
}
/**
 * 
 * @export
 * @interface TokenObtainPair
 */
export interface TokenObtainPair {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface TokenRefresh
 */
export interface TokenRefresh {
    /**
     * 
     * @type {string}
     * @memberof TokenRefresh
     */
    'refresh': string;
    /**
     * 
     * @type {string}
     * @memberof TokenRefresh
     */
    'access'?: string;
}
/**
 * 
 * @export
 * @interface TokenVerify
 */
export interface TokenVerify {
    /**
     * 
     * @type {string}
     * @memberof TokenVerify
     */
    'token': string;
}

/**
 * BatchApi - axios parameter creator
 * @export
 */
export const BatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Batch} [batch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBatch: async (batch?: Batch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batch/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyBatch: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyBatch', 'id', id)
            const localVarPath = `/batch/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBatchs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batch/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch.
         * @param {Batch} [batch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateBatch: async (id: string, batch?: Batch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateBatch', 'id', id)
            const localVarPath = `/batch/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBatch: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveBatch', 'id', id)
            const localVarPath = `/batch/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch.
         * @param {Batch} [batch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBatch: async (id: string, batch?: Batch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBatch', 'id', id)
            const localVarPath = `/batch/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchApi - functional programming interface
 * @export
 */
export const BatchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BatchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Batch} [batch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBatch(batch?: Batch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Batch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBatch(batch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyBatch(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyBatch(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBatchs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Batch>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBatchs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch.
         * @param {Batch} [batch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateBatch(id: string, batch?: Batch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Batch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateBatch(id, batch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveBatch(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Batch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveBatch(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch.
         * @param {Batch} [batch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBatch(id: string, batch?: Batch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Batch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBatch(id, batch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BatchApi - factory interface
 * @export
 */
export const BatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BatchApiFp(configuration)
    return {
        /**
         * 
         * @param {Batch} [batch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBatch(batch?: Batch, options?: any): AxiosPromise<Batch> {
            return localVarFp.createBatch(batch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyBatch(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyBatch(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBatchs(options?: any): AxiosPromise<Array<Batch>> {
            return localVarFp.listBatchs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch.
         * @param {Batch} [batch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateBatch(id: string, batch?: Batch, options?: any): AxiosPromise<Batch> {
            return localVarFp.partialUpdateBatch(id, batch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBatch(id: string, options?: any): AxiosPromise<Batch> {
            return localVarFp.retrieveBatch(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch.
         * @param {Batch} [batch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBatch(id: string, batch?: Batch, options?: any): AxiosPromise<Batch> {
            return localVarFp.updateBatch(id, batch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BatchApi - object-oriented interface
 * @export
 * @class BatchApi
 * @extends {BaseAPI}
 */
export class BatchApi extends BaseAPI {
    /**
     * 
     * @param {Batch} [batch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public createBatch(batch?: Batch, options?: AxiosRequestConfig) {
        return BatchApiFp(this.configuration).createBatch(batch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this batch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public destroyBatch(id: string, options?: AxiosRequestConfig) {
        return BatchApiFp(this.configuration).destroyBatch(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public listBatchs(options?: AxiosRequestConfig) {
        return BatchApiFp(this.configuration).listBatchs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this batch.
     * @param {Batch} [batch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public partialUpdateBatch(id: string, batch?: Batch, options?: AxiosRequestConfig) {
        return BatchApiFp(this.configuration).partialUpdateBatch(id, batch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this batch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public retrieveBatch(id: string, options?: AxiosRequestConfig) {
        return BatchApiFp(this.configuration).retrieveBatch(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this batch.
     * @param {Batch} [batch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public updateBatch(id: string, batch?: Batch, options?: AxiosRequestConfig) {
        return BatchApiFp(this.configuration).updateBatch(id, batch, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BatchCSVApi - axios parameter creator
 * @export
 */
export const BatchCSVApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BatchCSV} [batchCSV] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBatchCSV: async (batchCSV?: BatchCSV, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batchCSV/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchCSV, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch csv.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyBatchCSV: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyBatchCSV', 'id', id)
            const localVarPath = `/batchCSV/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBatchCSVs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batchCSV/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch csv.
         * @param {BatchCSV} [batchCSV] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateBatchCSV: async (id: string, batchCSV?: BatchCSV, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateBatchCSV', 'id', id)
            const localVarPath = `/batchCSV/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchCSV, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch csv.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBatchCSV: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveBatchCSV', 'id', id)
            const localVarPath = `/batchCSV/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch csv.
         * @param {BatchCSV} [batchCSV] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBatchCSV: async (id: string, batchCSV?: BatchCSV, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBatchCSV', 'id', id)
            const localVarPath = `/batchCSV/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(batchCSV, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchCSVApi - functional programming interface
 * @export
 */
export const BatchCSVApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BatchCSVApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BatchCSV} [batchCSV] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBatchCSV(batchCSV?: BatchCSV, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchCSV>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBatchCSV(batchCSV, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch csv.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyBatchCSV(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyBatchCSV(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBatchCSVs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BatchCSV>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBatchCSVs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch csv.
         * @param {BatchCSV} [batchCSV] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateBatchCSV(id: string, batchCSV?: BatchCSV, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchCSV>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateBatchCSV(id, batchCSV, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch csv.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveBatchCSV(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchCSV>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveBatchCSV(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch csv.
         * @param {BatchCSV} [batchCSV] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBatchCSV(id: string, batchCSV?: BatchCSV, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchCSV>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBatchCSV(id, batchCSV, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BatchCSVApi - factory interface
 * @export
 */
export const BatchCSVApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BatchCSVApiFp(configuration)
    return {
        /**
         * 
         * @param {BatchCSV} [batchCSV] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBatchCSV(batchCSV?: BatchCSV, options?: any): AxiosPromise<BatchCSV> {
            return localVarFp.createBatchCSV(batchCSV, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch csv.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyBatchCSV(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyBatchCSV(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBatchCSVs(options?: any): AxiosPromise<Array<BatchCSV>> {
            return localVarFp.listBatchCSVs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch csv.
         * @param {BatchCSV} [batchCSV] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateBatchCSV(id: string, batchCSV?: BatchCSV, options?: any): AxiosPromise<BatchCSV> {
            return localVarFp.partialUpdateBatchCSV(id, batchCSV, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch csv.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBatchCSV(id: string, options?: any): AxiosPromise<BatchCSV> {
            return localVarFp.retrieveBatchCSV(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this batch csv.
         * @param {BatchCSV} [batchCSV] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBatchCSV(id: string, batchCSV?: BatchCSV, options?: any): AxiosPromise<BatchCSV> {
            return localVarFp.updateBatchCSV(id, batchCSV, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BatchCSVApi - object-oriented interface
 * @export
 * @class BatchCSVApi
 * @extends {BaseAPI}
 */
export class BatchCSVApi extends BaseAPI {
    /**
     * 
     * @param {BatchCSV} [batchCSV] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchCSVApi
     */
    public createBatchCSV(batchCSV?: BatchCSV, options?: AxiosRequestConfig) {
        return BatchCSVApiFp(this.configuration).createBatchCSV(batchCSV, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this batch csv.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchCSVApi
     */
    public destroyBatchCSV(id: string, options?: AxiosRequestConfig) {
        return BatchCSVApiFp(this.configuration).destroyBatchCSV(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchCSVApi
     */
    public listBatchCSVs(options?: AxiosRequestConfig) {
        return BatchCSVApiFp(this.configuration).listBatchCSVs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this batch csv.
     * @param {BatchCSV} [batchCSV] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchCSVApi
     */
    public partialUpdateBatchCSV(id: string, batchCSV?: BatchCSV, options?: AxiosRequestConfig) {
        return BatchCSVApiFp(this.configuration).partialUpdateBatchCSV(id, batchCSV, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this batch csv.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchCSVApi
     */
    public retrieveBatchCSV(id: string, options?: AxiosRequestConfig) {
        return BatchCSVApiFp(this.configuration).retrieveBatchCSV(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this batch csv.
     * @param {BatchCSV} [batchCSV] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchCSVApi
     */
    public updateBatchCSV(id: string, batchCSV?: BatchCSV, options?: AxiosRequestConfig) {
        return BatchCSVApiFp(this.configuration).updateBatchCSV(id, batchCSV, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FeedstockApi - axios parameter creator
 * @export
 */
export const FeedstockApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Feedstock} [feedstock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeedstock: async (feedstock?: Feedstock, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feedstock/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feedstock, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this feedstock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyFeedstock: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyFeedstock', 'id', id)
            const localVarPath = `/feedstock/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeedstocks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feedstock/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this feedstock.
         * @param {Feedstock} [feedstock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateFeedstock: async (id: string, feedstock?: Feedstock, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateFeedstock', 'id', id)
            const localVarPath = `/feedstock/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feedstock, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this feedstock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveFeedstock: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveFeedstock', 'id', id)
            const localVarPath = `/feedstock/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this feedstock.
         * @param {Feedstock} [feedstock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeedstock: async (id: string, feedstock?: Feedstock, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateFeedstock', 'id', id)
            const localVarPath = `/feedstock/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feedstock, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedstockApi - functional programming interface
 * @export
 */
export const FeedstockApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedstockApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Feedstock} [feedstock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeedstock(feedstock?: Feedstock, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feedstock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFeedstock(feedstock, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this feedstock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyFeedstock(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyFeedstock(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeedstocks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Feedstock>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFeedstocks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this feedstock.
         * @param {Feedstock} [feedstock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateFeedstock(id: string, feedstock?: Feedstock, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feedstock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateFeedstock(id, feedstock, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this feedstock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveFeedstock(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feedstock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveFeedstock(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this feedstock.
         * @param {Feedstock} [feedstock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFeedstock(id: string, feedstock?: Feedstock, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feedstock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFeedstock(id, feedstock, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeedstockApi - factory interface
 * @export
 */
export const FeedstockApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedstockApiFp(configuration)
    return {
        /**
         * 
         * @param {Feedstock} [feedstock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeedstock(feedstock?: Feedstock, options?: any): AxiosPromise<Feedstock> {
            return localVarFp.createFeedstock(feedstock, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this feedstock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyFeedstock(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyFeedstock(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeedstocks(options?: any): AxiosPromise<Array<Feedstock>> {
            return localVarFp.listFeedstocks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this feedstock.
         * @param {Feedstock} [feedstock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateFeedstock(id: string, feedstock?: Feedstock, options?: any): AxiosPromise<Feedstock> {
            return localVarFp.partialUpdateFeedstock(id, feedstock, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this feedstock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveFeedstock(id: string, options?: any): AxiosPromise<Feedstock> {
            return localVarFp.retrieveFeedstock(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this feedstock.
         * @param {Feedstock} [feedstock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeedstock(id: string, feedstock?: Feedstock, options?: any): AxiosPromise<Feedstock> {
            return localVarFp.updateFeedstock(id, feedstock, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedstockApi - object-oriented interface
 * @export
 * @class FeedstockApi
 * @extends {BaseAPI}
 */
export class FeedstockApi extends BaseAPI {
    /**
     * 
     * @param {Feedstock} [feedstock] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedstockApi
     */
    public createFeedstock(feedstock?: Feedstock, options?: AxiosRequestConfig) {
        return FeedstockApiFp(this.configuration).createFeedstock(feedstock, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this feedstock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedstockApi
     */
    public destroyFeedstock(id: string, options?: AxiosRequestConfig) {
        return FeedstockApiFp(this.configuration).destroyFeedstock(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedstockApi
     */
    public listFeedstocks(options?: AxiosRequestConfig) {
        return FeedstockApiFp(this.configuration).listFeedstocks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this feedstock.
     * @param {Feedstock} [feedstock] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedstockApi
     */
    public partialUpdateFeedstock(id: string, feedstock?: Feedstock, options?: AxiosRequestConfig) {
        return FeedstockApiFp(this.configuration).partialUpdateFeedstock(id, feedstock, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this feedstock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedstockApi
     */
    public retrieveFeedstock(id: string, options?: AxiosRequestConfig) {
        return FeedstockApiFp(this.configuration).retrieveFeedstock(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this feedstock.
     * @param {Feedstock} [feedstock] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedstockApi
     */
    public updateFeedstock(id: string, feedstock?: Feedstock, options?: AxiosRequestConfig) {
        return FeedstockApiFp(this.configuration).updateFeedstock(id, feedstock, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GeneratePuroApi - axios parameter creator
 * @export
 */
export const GeneratePuroApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listgeneratePuros: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/generatePuro/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneratePuroApi - functional programming interface
 * @export
 */
export const GeneratePuroApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneratePuroApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listgeneratePuros(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listgeneratePuros(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GeneratePuroApi - factory interface
 * @export
 */
export const GeneratePuroApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneratePuroApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listgeneratePuros(options?: any): AxiosPromise<Array<any>> {
            return localVarFp.listgeneratePuros(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeneratePuroApi - object-oriented interface
 * @export
 * @class GeneratePuroApi
 * @extends {BaseAPI}
 */
export class GeneratePuroApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneratePuroApi
     */
    public listgeneratePuros(options?: AxiosRequestConfig) {
        return GeneratePuroApiFp(this.configuration).listgeneratePuros(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Report} [report] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport: async (report?: Report, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/report/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(report, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyReport: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyReport', 'id', id)
            const localVarPath = `/report/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReports: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/report/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this report.
         * @param {Report} [report] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateReport: async (id: string, report?: Report, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateReport', 'id', id)
            const localVarPath = `/report/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(report, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveReport: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveReport', 'id', id)
            const localVarPath = `/report/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this report.
         * @param {Report} [report] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReport: async (id: string, report?: Report, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateReport', 'id', id)
            const localVarPath = `/report/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(report, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Report} [report] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReport(report?: Report, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReport(report, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyReport(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyReport(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReports(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Report>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReports(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this report.
         * @param {Report} [report] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateReport(id: string, report?: Report, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateReport(id, report, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveReport(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveReport(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this report.
         * @param {Report} [report] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReport(id: string, report?: Report, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReport(id, report, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportApiFp(configuration)
    return {
        /**
         * 
         * @param {Report} [report] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport(report?: Report, options?: any): AxiosPromise<Report> {
            return localVarFp.createReport(report, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyReport(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyReport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReports(options?: any): AxiosPromise<Array<Report>> {
            return localVarFp.listReports(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this report.
         * @param {Report} [report] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateReport(id: string, report?: Report, options?: any): AxiosPromise<Report> {
            return localVarFp.partialUpdateReport(id, report, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveReport(id: string, options?: any): AxiosPromise<Report> {
            return localVarFp.retrieveReport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this report.
         * @param {Report} [report] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReport(id: string, report?: Report, options?: any): AxiosPromise<Report> {
            return localVarFp.updateReport(id, report, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI {
    /**
     * 
     * @param {Report} [report] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public createReport(report?: Report, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).createReport(report, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public destroyReport(id: string, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).destroyReport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public listReports(options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).listReports(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this report.
     * @param {Report} [report] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public partialUpdateReport(id: string, report?: Report, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).partialUpdateReport(id, report, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public retrieveReport(id: string, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).retrieveReport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this report.
     * @param {Report} [report] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public updateReport(id: string, report?: Report, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).updateReport(id, report, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TokenApi - axios parameter creator
 * @export
 */
export const TokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} [tokenObtainPair] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTokenObtainPair: async (tokenObtainPair?: TokenObtainPair, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenObtainPair, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} [tokenRefresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTokenRefresh: async (tokenRefresh?: TokenRefresh, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/token/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRefresh, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
         * @param {TokenVerify} [tokenVerify] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTokenVerify: async (tokenVerify?: TokenVerify, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/token/verify/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenVerify, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenApi - functional programming interface
 * @export
 */
export const TokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenApiAxiosParamCreator(configuration)
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} [tokenObtainPair] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTokenObtainPair(tokenObtainPair?: TokenObtainPair, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenObtainPair>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTokenObtainPair(tokenObtainPair, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} [tokenRefresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTokenRefresh(tokenRefresh?: TokenRefresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefresh>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTokenRefresh(tokenRefresh, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
         * @param {TokenVerify} [tokenVerify] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTokenVerify(tokenVerify?: TokenVerify, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenVerify>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTokenVerify(tokenVerify, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TokenApi - factory interface
 * @export
 */
export const TokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenApiFp(configuration)
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} [tokenObtainPair] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTokenObtainPair(tokenObtainPair?: TokenObtainPair, options?: any): AxiosPromise<TokenObtainPair> {
            return localVarFp.createTokenObtainPair(tokenObtainPair, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} [tokenRefresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTokenRefresh(tokenRefresh?: TokenRefresh, options?: any): AxiosPromise<TokenRefresh> {
            return localVarFp.createTokenRefresh(tokenRefresh, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
         * @param {TokenVerify} [tokenVerify] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTokenVerify(tokenVerify?: TokenVerify, options?: any): AxiosPromise<TokenVerify> {
            return localVarFp.createTokenVerify(tokenVerify, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TokenApi - object-oriented interface
 * @export
 * @class TokenApi
 * @extends {BaseAPI}
 */
export class TokenApi extends BaseAPI {
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {TokenObtainPair} [tokenObtainPair] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public createTokenObtainPair(tokenObtainPair?: TokenObtainPair, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).createTokenObtainPair(tokenObtainPair, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {TokenRefresh} [tokenRefresh] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public createTokenRefresh(tokenRefresh?: TokenRefresh, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).createTokenRefresh(tokenRefresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
     * @param {TokenVerify} [tokenVerify] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public createTokenVerify(tokenVerify?: TokenVerify, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).createTokenVerify(tokenVerify, options).then((request) => request(this.axios, this.basePath));
    }
}


